
user  www;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


server {
    listen 6699 default so_keepalive=2s:2s:8;
    server_name foo.com;
 
    root /www/nginx/html;
    index index.html index.htm index.php;
 
    location / {
        try_files $uri $uri/ /index.php ;
    }
 
    location ~ \.php$ {
        try_files $uri =404;
 
        include fastcgi.conf;
        fastcgi_pass 127.0.0.1:9000;
    }

    location /1.0/websocket {

      lua_socket_log_errors off;
      lua_check_client_abort on;

      content_by_lua '

        local server = require "resty.websocket.server"

        local wb, err = server:new{

        timeout = 5000,  -- in milliseconds

        max_payload_len = 65535,

        }

        if not wb then

          ngx.log(ngx.ERR, "failed to new websocket: ", err)

          return ngx.exit(444)

        end

        while true do

          local data, typ, err = wb:recv_frame()

          if wb.fatal then

            ngx.log(ngx.ERR, "failed to receive frame: ", err)

            return ngx.exit(444)

          end

          if not data then

            local bytes, err = wb:send_ping()

            if not bytes then

              ngx.log(ngx.ERR, "failed to send ping: ", err)

              return ngx.exit(444)

            end

          elseif typ == "close" then break

          elseif typ == "ping" then

            local bytes, err = wb:send_pong()

            if not bytes then

              ngx.log(ngx.ERR, "failed to send pong: ", err)

              return ngx.exit(444)

            end

          elseif typ == "pong" then

            ngx.log(ngx.INFO, "client ponged")

          elseif typ == "text" then

            local bytes, err = wb:send_text(data)

            if not bytes then

              ngx.log(ngx.ERR, "failed to send text: ", err)

              return ngx.exit(444)

            end

          end

        end

        wb:send_close()

      ';

    }
}
# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
